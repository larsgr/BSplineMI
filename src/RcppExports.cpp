// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// SplineBlendAll
NumericVector SplineBlendAll(NumericVector z, NumericVector knots, int splineOrder, int nBins);
RcppExport SEXP _BSplineMI_SplineBlendAll(SEXP zSEXP, SEXP knotsSEXP, SEXP splineOrderSEXP, SEXP nBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type splineOrder(splineOrderSEXP);
    Rcpp::traits::input_parameter< int >::type nBins(nBinsSEXP);
    rcpp_result_gen = Rcpp::wrap(SplineBlendAll(z, knots, splineOrder, nBins));
    return rcpp_result_gen;
END_RCPP
}
// hist2d_C
NumericVector hist2d_C(const NumericVector weights, const int i1, const int i2);
RcppExport SEXP _BSplineMI_hist2d_C(SEXP weightsSEXP, SEXP i1SEXP, SEXP i2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< const int >::type i2(i2SEXP);
    rcpp_result_gen = Rcpp::wrap(hist2d_C(weights, i1, i2));
    return rcpp_result_gen;
END_RCPP
}
// entropy2d_C
double entropy2d_C(const NumericVector weights, const int i1, const int i2);
RcppExport SEXP _BSplineMI_entropy2d_C(SEXP weightsSEXP, SEXP i1SEXP, SEXP i2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< const int >::type i2(i2SEXP);
    rcpp_result_gen = Rcpp::wrap(entropy2d_C(weights, i1, i2));
    return rcpp_result_gen;
END_RCPP
}
// entropyHist2d_C
double entropyHist2d_C(const NumericVector& weights, const int i1, const int i2, const int nBins, const int nSamples);
RcppExport SEXP _BSplineMI_entropyHist2d_C(SEXP weightsSEXP, SEXP i1SEXP, SEXP i2SEXP, SEXP nBinsSEXP, SEXP nSamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< const int >::type i2(i2SEXP);
    Rcpp::traits::input_parameter< const int >::type nBins(nBinsSEXP);
    Rcpp::traits::input_parameter< const int >::type nSamples(nSamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(entropyHist2d_C(weights, i1, i2, nBins, nSamples));
    return rcpp_result_gen;
END_RCPP
}
// calcMIfromWeights
NumericMatrix calcMIfromWeights(const NumericVector entropy, const NumericVector weights, const int threads);
RcppExport SEXP _BSplineMI_calcMIfromWeights(SEXP entropySEXP, SEXP weightsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type entropy(entropySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMIfromWeights(entropy, weights, threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BSplineMI_SplineBlendAll", (DL_FUNC) &_BSplineMI_SplineBlendAll, 4},
    {"_BSplineMI_hist2d_C", (DL_FUNC) &_BSplineMI_hist2d_C, 3},
    {"_BSplineMI_entropy2d_C", (DL_FUNC) &_BSplineMI_entropy2d_C, 3},
    {"_BSplineMI_entropyHist2d_C", (DL_FUNC) &_BSplineMI_entropyHist2d_C, 5},
    {"_BSplineMI_calcMIfromWeights", (DL_FUNC) &_BSplineMI_calcMIfromWeights, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BSplineMI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
